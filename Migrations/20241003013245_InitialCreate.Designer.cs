// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimplyBooksAPI;

#nullable disable

namespace SimplyBooksAPI.Migrations
{
    [DbContext(typeof(SimplyBooksAPIDbContext))]
    [Migration("20241003013245_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimplyBooksAPI.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "emily.brown@example.com",
                            Favorite = true,
                            FirstName = "Emily",
                            Image = "https://example.com/images/emily_brown.jpg",
                            LastName = "Brown",
                            Uid = "user333"
                        },
                        new
                        {
                            Id = 2,
                            Email = "michael.green@example.com",
                            Favorite = false,
                            FirstName = "Michael",
                            Image = "https://example.com/images/michael_green.jpg",
                            LastName = "Green",
                            Uid = "user444"
                        },
                        new
                        {
                            Id = 3,
                            Email = "sophia.wilson@example.com",
                            Favorite = true,
                            FirstName = "Sophia",
                            Image = "https://example.com/images/sophia_wilson.jpg",
                            LastName = "Wilson",
                            Uid = "user555"
                        });
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("Sale")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "A thrilling journey through the world of coding.",
                            Image = "https://example.com/images/coding_adventures.jpg",
                            Price = 19.99m,
                            Sale = true,
                            Title = "The Adventures of Coding",
                            Uid = "user123"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Description = "A comprehensive guide to becoming a proficient software engineer.",
                            Image = "https://example.com/images/software_engineering.jpg",
                            Price = 29.99m,
                            Sale = false,
                            Title = "Mastering Software Engineering",
                            Uid = "user456"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Description = "An insightful look into writing maintainable and clean code.",
                            Image = "https://example.com/images/clean_code_secrets.jpg",
                            Price = 24.99m,
                            Sale = true,
                            Title = "The Secrets of Clean Code",
                            Uid = "user789"
                        });
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ross.morgan933@gmail.com",
                            Uid = "abc123",
                            UserName = "rossmorgan"
                        },
                        new
                        {
                            Id = 2,
                            Email = "asmith@example.com",
                            Uid = "xyz789",
                            UserName = "asmith"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mwilliams@example.com",
                            Uid = "lmn456",
                            UserName = "mwilliams"
                        });
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Book", b =>
                {
                    b.HasOne("SimplyBooksAPI.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SimplyBooksAPI.Models.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
